import { hex } from '@scure/base';
import { describe, should } from 'micro-should';
import { deepStrictEqual, throws } from 'node:assert';
import { CBOR } from '../src/cbor.ts';

describe('CBOR', () => {
  should('Decode', () => {
    const VECTORS = [
      // infinity arrays
      [[], '9fff'],
      [[[0]], '9f9f00ffff'],
      [
        [
          [0, 1],
          [2, 3],
        ],
        '9f9f0001ff9f0203ffff',
      ],
      [
        [
          [0, 1, 2],
          [3, 4, 5],
          [6, 7, 8],
        ],
        '9f9f000102ff9f030405ff9f060708ffff',
      ],
      // infinity bytes
      [
        new Uint8Array([101, 120, 97, 109, 112, 108, 101, 206, 177, 226, 137, 164, 206, 178]),
        '5f476578616d706c6547ceb1e289a4ceb2ff',
      ],
      [new Uint8Array([101, 120, 97, 109, 112, 108, 101]), '5f476578616d706c65ff'],
      [Uint8Array.of(), '5fff'],
      [Uint8Array.of(), '5f40ff'],
      // infinity strings
      ['exampleα≤β', '7f676578616d706c6567ceb1e289a4ceb2ff'],
      ['example', '7f676578616d706c65ff'],
      ['', '7fff'],
      ['', '7f60ff'],
      // RFC 8949
      [0, '00'],
      [1, '01'],
      [10, '0a'],
      [23, '17'],
      [24, '1818'],
      [25, '1819'],
      [100, '1864'],
      [1000, '1903e8'],
      [1000000, '1a000f4240'],
      [1000000000000n, '1b000000e8d4a51000'],
      [18446744073709551615n, '1bffffffffffffffff'],
      [-18446744073709551616n, '3bffffffffffffffff'],
      [-1, '20'],
      [-10, '29'],
      [-100, '3863'],
      [-1000, '3903e7'],
      [0.0, 'f90000'],
      [-0.0, 'f98000'],
      [1.0, 'f93c00'],
      [1.1, 'fb3ff199999999999a'],
      [1.5, 'f93e00'],
      [65504.0, 'f97bff'],
      [100000.0, 'fa47c35000'],
      [3.4028234663852886e38, 'fa7f7fffff'],
      [1.0e300, 'fb7e37e43c8800759c'],
      [5.960464477539063e-8, 'f90001'],
      [0.00006103515625, 'f90400'],
      [-4.0, 'f9c400'],
      [-4.1, 'fbc010666666666666'],
      [Infinity, 'f97c00'],
      [NaN, 'f97e00'],
      [-Infinity, 'f9fc00'],
      [Infinity, 'fa7f800000'],
      [NaN, 'fa7fc00000'],
      [-Infinity, 'faff800000'],
      [Infinity, 'fb7ff0000000000000'],
      [NaN, 'fb7ff8000000000000'],
      [-Infinity, 'fbfff0000000000000'],
      [false, 'f4'],
      [true, 'f5'],
      [null, 'f6'],
      [undefined, 'f7'],
      [Uint8Array.of(), '40'],
      [new Uint8Array([1, 2, 3, 4]), '4401020304'],
      ['', '60'],
      ['a', '6161'],
      ['IETF', '6449455446'],
      ['"\\', '62225c'],
      ['\u00fc', '62c3bc'],
      ['\u6c34', '63e6b0b4'],
      ['\ud800\udd51', '64f0908591'],
      [[], '80'],
      [[1, 2, 3], '83010203'],
      [[1, [2, 3], [4, 5]], '8301820203820405'],
      [
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],
        '98190102030405060708090a0b0c0d0e0f101112131415161718181819',
      ],
      [{}, 'a0'],
      [{ 1: 2, 3: 4 }, 'a201020304'],
      [{ a: 1, b: [2, 3] }, 'a26161016162820203'],
      [['a', { b: 'c' }], '826161a161626163'],
      [{ a: 'A', b: 'B', c: 'C', d: 'D', e: 'E' }, 'a56161614161626142616361436164614461656145'],
      [new Uint8Array([1, 2, 3, 4, 5]), '5f42010243030405ff'],
      ['streaming', '7f657374726561646d696e67ff'],
      [[], '9fff'],
      [[1, [2, 3], [4, 5]], '9f018202039f0405ffff'],
      [[1, [2, 3], [4, 5]], '9f01820203820405ff'],
      [[1, [2, 3], [4, 5]], '83018202039f0405ff'],
      [[1, [2, 3], [4, 5]], '83019f0203ff820405'],
      [
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],
        '9f0102030405060708090a0b0c0d0e0f101112131415161718181819ff',
      ],
      [{ a: 1, b: [2, 3] }, 'bf61610161629f0203ffff'],
      [['a', { b: 'c' }], '826161bf61626163ff'],
      [{ Fun: true, Amt: -2 }, 'bf6346756ef563416d7421ff'],
      [0, '00'],
      [1, '01'],
      [10, '0a'],
      [23, '17'],
      [24, '1818'],
      [25, '1819'],
      [100, '1864'],
      [1000, '1903e8'],
      [1000000, '1a000f4240'],
      [1000000000000n, '1b000000e8d4a51000'],
      [18446744073709551615n, '1bffffffffffffffff'],
      [-18446744073709551616n, '3bffffffffffffffff'],
      [-1, '20'],
      [-10, '29'],
      [-100, '3863'],
      [-1000, '3903e7'],

      ['', '60'],
      ['a', '6161'],
      ['IETF', '6449455446'],
      ['"\\', '62225c'],
      ['\u00fc', '62c3bc'],
      ['\u6c34', '63e6b0b4'],
      ['\ud800\udd51', '64f0908591'],
      [[], '80'],
      [[1, 2, 3], '83010203'],
      [[1, [2, 3], [4, 5]], '8301820203820405'],
      [
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],
        '98190102030405060708090a0b0c0d0e0f101112131415161718181819',
      ],
      [{}, 'a0'],
      [{ 1: 2, 3: 4 }, 'a201020304'],
      [{ a: 1, b: [2, 3] }, 'a26161016162820203'],
      [['a', { b: 'c' }], '826161a161626163'],
      [{ a: 'A', b: 'B', c: 'C', d: 'D', e: 'E' }, 'a56161614161626142616361436164614461656145'],
      [0.0, 'f90000'],
      [-0.0, 'f98000'],
      [1.0, 'f93c00'],
      [1.1, 'fb3ff199999999999a'],
      [1.5, 'f93e00'],
      [65504.0, 'f97bff'],
      [100000.0, 'fa47c35000'],
      [3.4028234663852886e38, 'fa7f7fffff'],
      [1.0e300, 'fb7e37e43c8800759c'],
      [5.960464477539063e-8, 'f90001'],
      [0.00006103515625, 'f90400'],
      [-4.0, 'f9c400'],
      [-4.1, 'fbc010666666666666'],
      [Infinity, 'f97c00'],
      [NaN, 'f97e00'],
      [-Infinity, 'f9fc00'],
      [false, 'f4'],
      [true, 'f5'],
      [null, 'f6'],
      [undefined, 'f7'],
      [new Uint8Array(0), '40'],
      [new Uint8Array([1, 2, 3, 4]), '4401020304'],
      // TAGS
      // bigint
      //[18446744073709551616, 'c249010000000000000000'],
      //[-18446744073709551617, 'c349010000000000000000'],

      // ['', 'f0'], simple(16)
      //[simple(16), 'f0'],
      //[simple(255), "f8ff"],
      //[0("2013-03-21T20:04:00Z"), "c074323031332d30332d32315432303a 30343a30305a"],
      //[1(1363896240), "c11a514b67b0"],
      //[1(1363896240.5), "c1fb41d452d9ec200000"],
      //[23(h'01020304'), "d74401020304"],
      //[24(h'6449455446'), "d818456449455446"],
      //[32("http://www.example.com"), "d82076687474703a2f2f7777772e6578 616d706c652e636f6d"],
    ];

    for (const [exp, testHex] of VECTORS) {
      const decoded = CBOR.decode(hex.decode(testHex));
      deepStrictEqual(exp, decoded);
    }
  });
  should('Encode', () => {
    const VECTORS = [
      // RFC 8949
      [0, '00'],
      [1, '01'],
      [10, '0a'],
      [23, '17'],
      [24, '1818'],
      [25, '1819'],
      [100, '1864'],
      [1000, '1903e8'],
      [1000000, '1a000f4240'],
      [1000000000000n, '1b000000e8d4a51000'],
      [18446744073709551615n, '1bffffffffffffffff'],
      [-18446744073709551616n, '3bffffffffffffffff'],
      [-1, '20'],
      [-10, '29'],
      [-100, '3863'],
      [-1000, '3903e7'],
      [-0.0, 'f98000'],
      [1.1, 'fb3ff199999999999a'],
      // [1.5, 'f93e00'], <- we encode this as f32 instead of f16
      [3.4028234663852886e38, 'fa7f7fffff'],
      [1.0e300, 'fb7e37e43c8800759c'],
      // [5.960464477539063e-8, 'f90001'], // f16 :(
      // [0.00006103515625, 'f90400'], f16 :(
      [-4.1, 'fbc010666666666666'],
      [Infinity, 'f97c00'],
      [NaN, 'f97e00'],
      [-Infinity, 'f9fc00'],
      [false, 'f4'],
      [true, 'f5'],
      [null, 'f6'],
      [undefined, 'f7'],
      [Uint8Array.of(), '40'],
      [new Uint8Array([1, 2, 3, 4]), '4401020304'],
      ['', '60'],
      ['a', '6161'],
      ['IETF', '6449455446'],
      ['"\\', '62225c'],
      ['\u00fc', '62c3bc'],
      ['\u6c34', '63e6b0b4'],
      ['\ud800\udd51', '64f0908591'],
      [[], '80'],
      [[1, 2, 3], '83010203'],
      [[1, [2, 3], [4, 5]], '8301820203820405'],
      [
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],
        '98190102030405060708090a0b0c0d0e0f101112131415161718181819',
      ],
      [{}, 'a0'],
      [{ a: 1, b: [2, 3] }, 'a26161016162820203'],
      [['a', { b: 'c' }], '826161a161626163'],
      [{ a: 'A', b: 'B', c: 'C', d: 'D', e: 'E' }, 'a56161614161626142616361436164614461656145'],
      [0, '00'],
      [1, '01'],
      [10, '0a'],
      [23, '17'],
      [24, '1818'],
      [25, '1819'],
      [100, '1864'],
      [1000, '1903e8'],
      [1000000, '1a000f4240'],
      [1000000000000n, '1b000000e8d4a51000'],
      [18446744073709551615n, '1bffffffffffffffff'],
      [-18446744073709551616n, '3bffffffffffffffff'],
      [-1, '20'],
      [-10, '29'],
      [-100, '3863'],
      [-1000, '3903e7'],

      ['', '60'],
      ['a', '6161'],
      ['IETF', '6449455446'],
      ['"\\', '62225c'],
      ['\u00fc', '62c3bc'],
      ['\u6c34', '63e6b0b4'],
      ['\ud800\udd51', '64f0908591'],
      [[], '80'],
      [[1, 2, 3], '83010203'],
      [[1, [2, 3], [4, 5]], '8301820203820405'],
      [
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],
        '98190102030405060708090a0b0c0d0e0f101112131415161718181819',
      ],
      [{}, 'a0'],
      [{ a: 1, b: [2, 3] }, 'a26161016162820203'],
      [['a', { b: 'c' }], '826161a161626163'],
      [{ a: 'A', b: 'B', c: 'C', d: 'D', e: 'E' }, 'a56161614161626142616361436164614461656145'],
      [1.1, 'fb3ff199999999999a'],
      [3.4028234663852886e38, 'fa7f7fffff'],
      [1.0e300, 'fb7e37e43c8800759c'],
      [-4.1, 'fbc010666666666666'],
      [Infinity, 'f97c00'],
      [NaN, 'f97e00'],
      [-Infinity, 'f9fc00'],
      [false, 'f4'],
      [true, 'f5'],
      [null, 'f6'],
      [undefined, 'f7'],
      [new Uint8Array(0), '40'],
      [new Uint8Array([1, 2, 3, 4]), '4401020304'],
      // TAGS
      //[simple(16), "f0"],
      //[simple(255), "f8ff"],
      //[0("2013-03-21T20:04:00Z"), "c074323031332d30332d32315432303a 30343a30305a"],
      //[1(1363896240), "c11a514b67b0"],
      //[1(1363896240.5), "c1fb41d452d9ec200000"],
      //[23(h'01020304'), "d74401020304"],
      //[24(h'6449455446'), "d818456449455446"],
      //[32("http://www.example.com"), "d82076687474703a2f2f7777772e6578 616d706c652e636f6d"],
    ];

    for (const [value, exp] of VECTORS) {
      const encoded = hex.encode(CBOR.encode(value));
      deepStrictEqual(encoded, exp);
    }
  });

  should('malformed', () => {
    const VECTORS = [
      // End of input in a head
      '18',
      '19',
      '1a',
      '1b',
      '1901',
      '1a0102',
      '1b01020304050607',
      '38',
      '58',
      '78',
      '98',
      '9a01ff00',
      'b8',
      'd8',
      'f8',
      'f900',
      'fa0000',
      'fb000000',
      // Definite-length strings with short data
      '41',
      '61',
      '5affffffff00',
      '5bffffffffffffffff010203',
      '7affffffff00',
      '7b7fffffffffffffff010203',
      // Definite-length maps and arrays not closed with enough items
      '81',
      '818181818181818181',
      '8200',
      'a1',
      'a20102',
      'a100',
      'a2000000',
      // Tag number not followed by tag content
      'c0',
      // Indefinite-length strings not closed by a "break" stop code
      '5f4100',
      '7f6100',
      // Indefinite-length maps and arrays not closed by a "break" stop code
      '9f',
      '9f0102',
      'bf',
      'bf01020102',
      '819f',
      '9f8000',
      '9f9f9f9f9fffffffff',
      '9f819f819f9fffffff',
      // Reserved additional information values
      '1c',
      '1d',
      '1e',
      '3c',
      '3d',
      '3e',
      '5c',
      '5d',
      '5e',
      '7c',
      '7d',
      '7e',
      '9c',
      '9d',
      '9e',
      'bc',
      'bd',
      'be',
      'dc',
      'dd',
      'de',
      'fc',
      'fd',
      'fe',
      // Reserved two-byte encodings of simple values
      'f800',
      'f801',
      'f818',
      'f81f',
      // Indefinite-length string chunks not of the correct type:
      '5f00ff',
      '5f21ff',
      '5f6100ff',
      '5f80ff',
      '5fa0ff',
      '5fc000ff',
      '5fe0ff',
      '7f4100ff',
      // Indefinite-length string chunks not definite length
      '5f5f4100ffff',
      '7f7f6100ffff',
      // Break occurring on its own outside of an indefinite-length item
      'ff',
      // Break occurring in a definite-length array or map or a tag
      '81ff',
      '8200ff',
      'a1ff',
      'a1ff00',
      'a100ff',
      'a20000ff',
      '9f81ff',
      '9f829f819f9fffffffff',
      // Break in an indefinite-length map that would lead to an odd number of items (break in a value position):
      'bf00ff',
      'bf000000ff',
      // Major type 0, 1, 6 with additional information 31
      '1f',
      '3f',
      'df',
    ];
    for (const v of VECTORS) throws(() => CBOR.decode(hex.decode(v)), v);
  });
});

should.runWhen(import.meta.url);
